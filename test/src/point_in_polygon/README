https://wrf.ecse.rpi.edu//Research/Short_Notes/pnpoly.html

判断一个点是不是在一个多边形里面的方法是，从这个点向任意方向画一条射线，然后记录和多边形有相交的边的个数，
如果有奇数个，则该点在多边形内部，否则在外部。
（为了编程方便，直接从该点画一条平行于X轴，且方向为正X方向的射线）

为了性能的优化，先根据多边形的顶点找到能够包含这个多边形的最小方框，先判断是不是在这个方框里。

判断是否相交的代码是：
```
((verts[i].Y > pt.Y) != (verts[j].Y > pt.Y)) &&
			(pt.X < (verts[j].X-verts[i].X)*(pt.Y-verts[i].Y)/(verts[j].Y-verts[i].Y)+verts[i].X)
```

这里很巧妙的用第一个判断条件，避开了第二个判断条件可能出现的除法分母为0的情况。

>因为第一个条件，verts[i].Y 和 verts[j].Y 不可能相等，否则就不成立，所以第二个条件的分母不会为0。


解决的问题：
这次回过头来再看一下这个 pip 库，是因为在实际使用中，出现了该在圈里的点，却被判断在圈外。原因是：
initPolygon的时候，直接把前面的位置用零值占住了（被注释的那一行），然后继续append，导致长度为期望的两倍。
```
    //points := make([]pip.Point, len(pointPairs), len(pointPairs))
	points := make([]pip.Point, 0, len(pointPairs))
	...
	points = append(points, p)

```
